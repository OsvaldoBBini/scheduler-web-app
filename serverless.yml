org: osvaldobazzanbini
app: dev-apps
service: apps

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  iam:
      role: arn:aws:iam::${aws:accountId}:role/SchedulerRoleLambda
  environment:
      COGNITO_CLIENT_ID: !Ref SAUserPoolClient
  httpApi:
    authorizers: 
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt SAUserPool.ProviderURL
        audience:
          - !Ref SAUserPoolClient


package:
  individually: true
  patterns:
    - '!tests/**'
    - '!@aws-sdk'
    - '!.github/**'
    - '!.gitignore'
    - '!eslint.config.mjs'
    - '!package.json'
    - '!vitest.config.js'
    - '!yarn.lock'
    - '!node_modules/**'
    - '!src/lambdas/**'

functions:

  # Authentication
  scheduler-sign-up-service:
    handler: src/lambdas/Auth/signUp/index.handler
    package:
      patterns:
        - 'src/lambdas/Auth/signUp/index.mjs'

    events:
      - httpApi:
          path: /auth/signup
          method: POST
  
  scheduler-sign-in-service:
    handler: src/lambdas/Auth/signIn/index.handler
    package:
      patterns:
        - 'src/lambdas/Auth/signIn/index.mjs'

    events:
      - httpApi:
          path: /auth/signin
          method: POST
  
  scheduler-refresh-token-service:
    handler: src/lambdas/Auth/refreshToken/index.handler
    package:
      patterns:
        - 'src/lambdas/Auth/refreshToken/index.mjs'

    events:
      - httpApi:
          path: /auth/refreshToken
          method: POST
  
  scheduler-confirmation-account-service:
    handler: src/lambdas/Auth/accountConfirmation/index.handler
    package:
      patterns:
        - 'src/lambdas/Auth/accountConfirmation/index.mjs'

    events:
      - httpApi:
          path: /auth/confirmation
          method: POST

  # Profile
  scheduler-profile-info:
    handler: src/lambdas/Me/profile/index.handler
    package:
      patterns:
        - 'src/lambdas/Me/profile/index.mjs'

    events:
      - httpApi:
          path: /profile
          method: GET
          authorizer: 
            name: CognitoAuthorizer
  
  # Appointments
  scheduler-create-appointment:
    handler: src/lambdas/Appointments/scheduler-create-appointment/index.handler
    package:
      patterns:
        - 'src/lambdas/Appointments/scheduler-create-appointment/index.mjs'

    events:
      - httpApi:
          path: /appointments/{userId}
          method: POST
          authorizer: 
            name: CognitoAuthorizer

  scheduler-show-appointments:
    handler: src/lambdas/Appointments/scheduler-show-appointments/index.handler
    package:
      patterns:
        - 'src/lambdas/Appointments/scheduler-show-appointments/index.mjs'
        
    events:
      - httpApi:
          path: /appointments/{userId}
          method: GET
          authorizer: 
            name: CognitoAuthorizer
  
  scheduler-delete-appointment:
    handler: src/lambdas/Appointments/scheduler-delete-appointment/index.handler
    package:
      patterns:
        - 'src/lambdas/Appointments/scheduler-delete-appointment/index.mjs'
        
    events:
      - httpApi:
          path: /appointments/{userId}
          method: DELETE
          authorizer: 
            name: CognitoAuthorizer

  scheduler-update-appointment:
    handler: src/lambdas/Appointments/scheduler-update-appointment/index.handler
    package:
      patterns:
        - 'src/lambdas/Appointments/scheduler-update-appointment/index.mjs'
        
    events:
      - httpApi:
          path: /appointments/{userId}
          method: PUT
          authorizer: 
            name: CognitoAuthorizer

  # Appointments-type
  scheduler-create-appointment-type:
    handler: src/lambdas/AppointmentTypes/scheduler-create-appointment-type/index.handler
    package:
      patterns:
        - 'src/lambdas/AppointmentTypes/scheduler-create-appointment-type/index.mjs'
        
    events:
      - httpApi:
          path: /appointments_type/{userId}
          method: POST
          authorizer: 
            name: CognitoAuthorizer
  
  scheduler-show-appointment-type:
    handler: src/lambdas/AppointmentTypes/scheduler-show-appointment-type/index.handler
    package:
      patterns:
        - 'src/lambdas/AppointmentTypes/scheduler-show-appointment-type/index.mjs'
        
    events:
      - httpApi:
          path: /appointments_type/{userId}
          method: GET
          authorizer: 
            name: CognitoAuthorizer
  
  scheduler-delete-appointment-type:
    handler: src/lambdas/AppointmentTypes/scheduler-delete-appointment-type/index.handler
    package:
      patterns:
        - 'src/lambdas/AppointmentTypes/scheduler-delete-appointment-type/index.mjs'
        
    events:
      - httpApi:
          path: /appointments_type/{userId}
          method: DELETE
          authorizer: 
            name: CognitoAuthorizer
  
  scheduler-update-appointment-type:
    handler: src/lambdas/AppointmentTypes/scheduler-update-appointment-type/index.handler
    package:
      patterns:
        - 'src/lambdas/AppointmentTypes/scheduler-update-appointment-type/index.mjs'
        
    events:
      - httpApi:
          path: /appointments_type/{userId}
          method: PUT
          authorizer: 
            name: CognitoAuthorizer
  
resources:
  Resources:

    SAppointments:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: SAppointments
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: GSI1PK
            KeyType: HASH
          - AttributeName: GSI1SK
            KeyType: RANGE
        DeletionProtectionEnabled: true

    SAUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        DeletionProtection: ACTIVE
        UserPoolName: SAUserPool
        MfaConfiguration: OFF
        AutoVerifiedAttributes: 
          - email
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        UsernameAttributes:
          - email
        AccountRecoverySetting:
          RecoveryMechanisms: 
            - Name: verified_email
              Priority: 1
        Policies:
          PasswordPolicy: 
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireUppercase: true
            TemporaryPasswordValidityDays: 2
        Schema:
          - Name: given_name
            Mutable: true
            Required: true
            AttributeDataType: String

    SAUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: SAUserPoolClient
        UserPoolId: !Ref SAUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AccessTokenValidity: 3
        RefreshTokenValidity: 48 # 2 days
        TokenValidityUnits:
          AccessToken: hours
          RefreshToken: hours 
